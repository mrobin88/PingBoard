version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pingboard}
      POSTGRES_USER: ${POSTGRES_USER:-pingboard_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pingboard_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - pingboard_network

  backend:
    build: ./backend
    command: gunicorn pingboard.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pingboard_user}:${POSTGRES_PASSWORD:-pingboard_password}@db:5432/${POSTGRES_DB:-pingboard}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - pingboard_network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    networks:
      - pingboard_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - pingboard_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  pingboard_network:
    driver: bridge
